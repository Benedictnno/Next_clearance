generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// ===================
// USER MODEL
// ===================
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student       Student?
  officer       Officer?
  admin         Admin?
  notifications Notification[]
}

// ===================
// STUDENT MODEL
// ===================
model Student {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @unique @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  matricNumber String    @unique
  firstName    String
  lastName     String
  department   String
  faculty      String
  level        String
  phoneNumber  String?
  address      String?
  dateOfBirth  DateTime?
  gender       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  clearanceProgress ClearanceProgress[]
  studentID         StudentID?
  nyscForm          NYSCForm?
  documents         Document[]
}

// ===================
// OFFICER MODEL
// ===================
model Officer {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @unique @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  name         String
  departmentId String     @db.ObjectId
  department   Department @relation(fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  clearanceApprovals ClearanceProgress[]
}

// ===================
// ADMIN MODEL
// ===================
model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===================
// DEPARTMENT MODEL
// ===================
model Department {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  description  String?
  contactEmail String?
  contactPhone String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  officers       Officer[]
  clearanceSteps ClearanceStep[]
}

// ===================
// CLEARANCE STEP MODEL
// ===================
model ClearanceStep {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  stepNumber      Int
  name            String
  description     String?
  departmentId    String     @db.ObjectId
  department      Department @relation(fields: [departmentId], references: [id])
  requiresPayment Boolean    @default(false)
  paymentAmount   Float?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  clearanceProgress ClearanceProgress[]
}

// ===================
// CLEARANCE PROGRESS MODEL
// ===================
model ClearanceProgress {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String        @db.ObjectId
  student     Student       @relation(fields: [studentId], references: [id])
  stepId      String        @db.ObjectId
  step        ClearanceStep @relation(fields: [stepId], references: [id])
  status      String        @default("pending")
  officerId   String?       @db.ObjectId
  officer     Officer?      @relation(fields: [officerId], references: [id])
  comment     String?
  documentUrl String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// ===================
// STUDENT ID MODEL
// ===================
model StudentID {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId  String   @unique @db.ObjectId
  student    Student  @relation(fields: [studentId], references: [id])
  cardNumber String   @unique
  qrCode     String
  imageUrl   String
  issuedDate DateTime @default(now())
  expiryDate DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ===================
// NYSC FORM MODEL
// ===================
model NYSCForm {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String   @unique @db.ObjectId
  student       Student  @relation(fields: [studentId], references: [id])
  formNumber    String   @unique
  formUrl       String
  generatedDate DateTime @default(now())
  status        String   @default("generated")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// ===================
// DOCUMENT MODEL
// ===================
model Document {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String   @db.ObjectId
  student      Student  @relation(fields: [studentId], references: [id])
  fileName     String
  fileUrl      String
  fileType     String
  fileSize     Int
  documentType String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ===================
// NOTIFICATION MODEL
// ===================
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String   @default("info")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
